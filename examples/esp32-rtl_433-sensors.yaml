# Example of rtl_433 based sensors in ESPHome
packages: 
  # this generally should be all what you need to add this rtl_433 component to esphome:
  rtl_433: github://juanboro/esphome-rtl_433-decoder/rtl_433.yaml

  #example of how to enable/disable specific rtl_433 protocols at boot.  This example enables
  #only the two sensors (a Govee leak detector and Lacross temperature/humidity sensor) 
  #which are used below
  runtime_protocols: !include rtl_433_protocols.yaml

  #you need to setup ESPHome and your radio board settings - customize as needed
  esp32_board: !include esp32devboard_and_cc1101_example.yaml


###############################################
## rtl_433 sensor example
###############################################
# How to use: 
# 1.  Configure the rtl_433 component to receive ESPhome remote data (receiver_id)
# 2.  Use the on_json_message trigger from the rtl_433 component to receive the json messages and process

# this example processes pulses from the remote receiver component and then updates buttons
# and sensors from the decoded data.  For some example ideas of how to obtain the model and id - 
# see the esp32-rtl_433-decoder-mqtt.yaml or esp32-rtl_433-decoder-api.yaml example files.
captive_portal:

web_server:
  port: 80

rtl_433:
  id: my_rtl433_id
  receiver_id: rf_receiver
  on_json_message: 
    then:
      - lambda: |-          
          if ((x["model"]=="Govee-Water")&&(x["id"].as<int>()==4759)) {
            id(govee_4759_wet).publish_state(x["detect_wet"].as<int>());
            if (x["event"]=="Button Press") {
              id(govee_4759_button).publish_state(true);
            } else if (x["battery_ok"]) {
              id(govee_4759_bat).publish_state(x["battery_ok"].as<float>());
            }
          } else if ((x["model"]=="LaCrosse-TX141THBv2")&&(x["id"].as<int>()==188)) {
            id(lacross_temp_sensor).publish_state(x["temperature_C"].as<float>());
            id(lacross_hum_sensor).publish_state(x["humidity"].as<float>());
          }
      - delay: .5s
      - lambda: |-
          id(govee_4759_button).publish_state(false);

sensor:
  - platform: template
    name: "Lacross Temperature Sensor"
    id: lacross_temp_sensor
    unit_of_measurement: celcius
  - platform: template
    name: "Lacross Humidity Sensor"
    id: lacross_hum_sensor
    unit_of_measurement: percent
  - platform: template
    name: "Govee Leak Detector battery level"
    id: govee_4759_bat
    unit_of_measurement: percent
  # - platform: template
  #   name: "Unparsed rtl_433 signals"
  #   id: rtl_433_unparsed
  #   lambda: return id(my_rtl433_id).rd.unparsedSignals;
binary_sensor:
  - platform: template
    name: "Govee Leak Detector Button Press"
    id: govee_4759_button
  - platform: template
    name: "Govee Leak Detector WET"
    id: govee_4759_wet

