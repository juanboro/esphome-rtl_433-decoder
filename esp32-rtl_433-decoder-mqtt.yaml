esphome:
  name: esp32-rtl433-decoder
  friendly_name: ESP32 RTL 433 Decoder example of MQTT relay

  libraries:
    - rtl_433_Decoder_ESP=https://github.com/juanboro/rtl_433_Decoder_ESP.git

packages:
  board_config: !include esp32_cc1101.yaml

external_components:
  - source:
      type: git
      url: https://github.com/juanboro/esphome-rtl_433-decoder

# How to use: 
# 1.  Create a rtl_433 component to receive the json messages and process
# 2.  Send raw data to the rtl_433 component via lambdas (usually remote_receiver on_raw)

# this example processes pulses from the remote receiver component and then sends decoded
# data via MQTT similar to how rtl_433 would.
# todo: add in the timestamp to the json message
rtl_433:
  id: my_rtl433_id
  on_json_message: 
    then:
      - mqtt.publish_json:
          topic: !lambda |-
            std::string topic=str_sprintf("rtl_433/%s/events",App.get_name().c_str());
            if (x["model"]) {
              if (x["id"])
                topic+=str_sprintf("/%s/%d",x["model"].as<const char*>(),x["id"].as<int>());
              else               
                topic+=str_sprintf("/%s",x["model"].as<const char*>());
            }
            return(topic);            
          payload: 
            root.set(x);

remote_receiver:
  - id: !extend rf_receiver
    on_raw:
      then:
        - lambda: |-
            id(my_rtl433_id).recv_raw(x);
